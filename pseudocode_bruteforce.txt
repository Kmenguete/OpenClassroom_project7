Bruteforce Algorithm
Function main()
Start
combinations[2^20] : shares dictionary array
for i = 0 ; i < len(combinations); i = i + 1
    binary = combinations[i]
    actions[undefined number in fact, it depends on the total price of shares] : shares
    profit of share = 0
    cost of share = 0
    for j = 0; j < len(binary); j = j + 1
        if binary[j] == "1":
            add share to the actions list
    for each action in actions:
        profit of share = profit of share + profit of every share
        cost of share = cost of share + cost share of every share
    if the total cost of a shares list is less of equal to 500 euros:
        add this shares list to the combinations array.
    Sort every combination according their profit.
    return the first combination of the list(the most profitable shares list)
    Calculate the runtime of the algorithm by subtracting the time at the end of the program with the time at the
    beginning of the program.
    Create a graph that analyze the time complexity of the algorithm.
    Calculate the number of combinations according the number of shares in a list and illustrate it into a graph.

Call the function.
End
